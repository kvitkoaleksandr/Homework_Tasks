Класс Task1
java
Копировать код
public class Task1 {
Это публичный класс с именем Task1. Он содержит метод processStudents, который выполняет всю основную работу.
Метод processStudents
java
Копировать код
public String processStudents(String inputFile) throws Exception {
String inputFile: метод принимает путь к входному файлу как строку.
throws Exception: метод объявляет, что может выбросить исключение (Exception), если что-то пойдёт не так.
Объявление выходного файла
java
Копировать код
String outputFile = inputFile.replace(".txt", "_filtered.txt");
Формируется имя выходного файла на основе имени входного. Например:
Входной файл: students.txt
Выходной файл: students_filtered.txt
Блок try-catch
java
Копировать код
try {
    // Основная логика работы с файлами
} catch (IOException e) {
    throw new Exception("Ошибка при обработке файла: " + e.getMessage(), e);
}
try: В этом блоке размещён код, который может выбросить исключение. Например, проблемы с чтением или записью файла.
catch: Если возникает исключение (IOException), оно перехватывается, и выбрасывается новое исключение с более понятным сообщением.
Чтение строк из файла
java
Копировать код
List<String> lines = Files.readAllLines(Paths.get(inputFile));
Files.readAllLines: Считывает все строки из файла и сохраняет их в список lines.
Пример содержимого lines для файла students.txt:
css
Копировать код
["Алексей:85", "Мария:92", "Иван:74", "Анна:88"]
Обработка данных через Stream API
java
Копировать код
List<String> filteredStudents = lines.stream()
Создаётся стрим из списка строк lines. Каждая строка обрабатывается по шагам.
1. Разделение строки на имя и баллы
java
Копировать код
.map(line -> line.split(":"))
Каждая строка разделяется по символу : на две части: имя и баллы.
Пример:
"Алексей:85" → ["Алексей", "85"]
2. Фильтрация некорректных строк
java
Копировать код
.filter(parts -> parts.length == 2)
Убираются строки, которые не содержат ровно две части. Например, строка без : или с пустым значением будет пропущена.
3. Преобразование в объект пары (имя, баллы)
java
Копировать код
.map(parts -> new AbstractMap.SimpleEntry<>(parts[0], Integer.parseInt(parts[1])))
Каждая строка преобразуется в объект AbstractMap.SimpleEntry, который хранит пару:
Ключ (parts[0]) — имя студента.
Значение (Integer.parseInt(parts[1])) — баллы студента, преобразованные в число.
Пример:
["Алексей", "85"] → ("Алексей", 85)
4. Фильтрация по баллам
java
Копировать код
.filter(entry -> entry.getValue() >= 80)
Убираются пары, где баллы меньше 80.
Пример:

("Иван", 74) будет исключён, так как баллы меньше 80.
5. Сортировка по баллам (по убыванию)
java
Копировать код
.sorted((e1, e2) -> e2.getValue().compareTo(e1.getValue()))
Оставшиеся пары сортируются в порядке убывания по значению (баллам).
Пример:

До сортировки: ("Алексей", 85), ("Мария", 92), ("Анна", 88)
После сортировки: ("Мария", 92), ("Анна", 88), ("Алексей", 85)
6. Преобразование обратно в строку
java
Копировать код
.map(entry -> entry.getKey() + ":" + entry.getValue())
Каждая пара преобразуется обратно в строку формата "Имя:Баллы".
Пример:

("Мария", 92) → "Мария:92"
7. Сбор результата
java
Копировать код
.collect(Collectors.toList());
Все обработанные строки собираются в список filteredStudents.
Пример:
css
Копировать код
["Мария:92", "Анна:88", "Алексей:85"]
Запись результатов в файл
java
Копировать код
Files.write(Paths.get(outputFile), filteredStudents);
Все строки из списка filteredStudents записываются в файл с именем outputFile.
Пример содержимого файла students_filtered.txt:
makefile
Копировать код
Мария:92
Анна:88
Алексей:85
Вывод успешного результата
java
Копировать код
System.out.println("Фильтрация завершена. Результат записан в " + outputFile);
После успешной записи выводится сообщение с именем выходного файла.
Возвращаемое значение
java
Копировать код
return outputFile;
Метод возвращает имя выходного файла, чтобы вызвать его можно было использовать результат.
Пример использования
java
Копировать код
public static void main(String[] args) {
    Task1 task = new Task1();
    try {
        String resultFile = task.processStudents("students.txt");
        System.out.println("Обработанный файл: " + resultFile);
    } catch (Exception e) {
        System.err.println("Ошибка: " + e.getMessage());
    }
}
Что делает этот код:
Читает строки из файла students.txt.
Обрабатывает данные:
Разделяет строки на имя и баллы.
Фильтрует строки с баллами меньше 80.
Сортирует оставшиеся строки по убыванию баллов.
Преобразует их обратно в строки.
Записывает результат в файл students_filtered.txt.
Возвращает имя выходного файла.